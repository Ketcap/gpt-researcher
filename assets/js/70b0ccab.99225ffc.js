"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4919],{5680:(e,r,n)=>{n.d(r,{xA:()=>p,yg:()=>d});var t=n(6540);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=t.createContext({}),u=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},p=function(e){var r=u(e.components);return t.createElement(c.Provider,{value:r},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},g=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=u(n),g=o,d=s["".concat(c,".").concat(g)]||s[g]||m[g]||a;return n?t.createElement(d,i(i({ref:r},p),{},{components:n})):t.createElement(d,i({ref:r},p))}));function d(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[s]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6528:(e,r,n)=>{n.r(r),n.d(r,{contentTitle:()=>i,default:()=>s,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=n(8168),o=(n(6540),n(5680));const a={},i=void 0,l={unversionedId:"gpt-researcher/llms/running-with-azure",id:"gpt-researcher/llms/running-with-azure",isDocsHomePage:!1,title:"running-with-azure",description:"Example: Azure OpenAI Configuration",source:"@site/docs/gpt-researcher/llms/running-with-azure.md",sourceDirName:"gpt-researcher/llms",slug:"/gpt-researcher/llms/running-with-azure",permalink:"/docs/gpt-researcher/llms/running-with-azure",editUrl:"https://github.com/assafelovic/gpt-researcher/tree/master/docs/docs/gpt-researcher/llms/running-with-azure.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Testing your LLM",permalink:"/docs/gpt-researcher/llms/testing-your-llm"},next:{title:"Running with Ollama",permalink:"/docs/gpt-researcher/llms/running-with-ollama"}},c=[{value:"Example: Azure OpenAI Configuration",id:"example-azure-openai-configuration",children:[],level:2}],u={toc:c},p="wrapper";function s(e){let{components:r,...n}=e;return(0,o.yg)(p,(0,t.A)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h2",{id:"example-azure-openai-configuration"},"Example: Azure OpenAI Configuration"),(0,o.yg)("p",null,"If you are not using OpenAI's models, but other model providers, besides the general configuration above, also additional environment variables are required."),(0,o.yg)("p",null,"Here is an example for ",(0,o.yg)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/ai-services/openai/concepts/models"},"Azure OpenAI")," configuration:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},'OPENAI_API_VERSION="2024-05-01-preview" # or whatever you are using\nAZURE_OPENAI_ENDPOINT="https://CHANGEMEN.openai.azure.com/" # change to the name of your deployment\nAZURE_OPENAI_API_KEY="[Your Key]" # change to your API key\n\nEMBEDDING="azure_openai:text-embedding-ada-002" # change to the deployment of your embedding model\n\nFAST_LLM="azure_openai:gpt-4o-mini" # change to the name of your deployment (not model-name)\nFAST_TOKEN_LIMIT=4000\n\nSMART_LLM="azure_openai:gpt-4o" # change to the name of your deployment (not model-name)\nSMART_TOKEN_LIMIT=4000\n\nRETRIEVER="bing" # if you are using Bing as your search engine (which is likely if you use Azure)\nBING_API_KEY="[Your Key]"\n')),(0,o.yg)("p",null,"For more details on what each variable does, you can check out the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.gptr.dev/docs/gpt-researcher/gptr/config"},"GPTR Config Docs")))}s.isMDXComponent=!0}}]);